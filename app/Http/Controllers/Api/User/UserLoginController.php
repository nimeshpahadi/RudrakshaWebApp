<?php
/**
 * Created by PhpStorm.
 * User: nimesh
 * Date: 3/31/17
 * Time: 11:22 AM
 */

namespace App\Http\Controllers\Api\User;


use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Laravel\Passport\Http\Controllers\AccessTokenController;
use Laravel\Passport\TokenRepository;
use Lcobucci\JWT\Parser as JwtParser;
use League\OAuth2\Server\AuthorizationServer;
use Psr\Http\Message\ServerRequestInterface;

class UserLoginController extends AccessTokenController
{
    public function __construct(AuthorizationServer $server, TokenRepository $tokens, JwtParser $jwt)
    {
        parent::__construct($server, $tokens, $jwt);
    }

    /**
     * Overriding AccessTokenController method
     * @param ServerRequestInterface $request
     * @return array|\Laravel\Passport\Http\Controllers\Response
     */
    public function issueToken(ServerRequestInterface $request)
    {
        $user = $request->getParsedBody();

        if ($user['grant_type']=="password") {
            $status = $this->loginConfirm($user['username']);
            if ($status==true) {
                return parent::issueToken($request); // TODO: Change the autogenerated stub
            }

            else {

                $respo = [
                    "status" => "false",
                    "message" => "you need to confirm your account. we have sent you an activation code, please check your email."
                ];

                return $respo;
            }
        }

        elseif ($user['grant_type']=="refresh_token") {
            return parent::issueToken($request); // TODO: Change the autogenerated stub
        }
    }

    /**
     * @param $request
     * @return bool
     */
    public function loginConfirm($request)
    {
        $user = DB::table('users')->select('*')->where('email', $request)->first();

        if (!$user->confirmed) {
            return false;
        }

        return $user;
    }

    /**
     * @param Request $request
     * @return array|\Illuminate\Http\JsonResponse
     */
    public function getUserId(Request $request)
    {
        $data = $request->all();

        $user = $this->loginConfirm($data);

        if ($user==false) {
            $response = [
                "status" => "false",
                "message" => "email not confirmed"
            ];

            return $response;
        }

        return response()->json($user->id);
    }

    /**
     * @param $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function getUserDetails($id)
    {
        $user = DB::table('users')->select('*')->where('id', $id)->first();

        return response()->json($user);
    }
}